
/home/julam5/Desktop/lab1/lab1custom.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 78 09 00 00 7c 09 00 00 80 09 00 00     @...x...|.......
  30:	84 09 00 00 74 09 00 00 88 09 00 00 8c 09 00 00     ....t...........

00000040 <__cs3_reset>:
  40:	ea000024 	b	d8 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f8084 	ldr	r8, [pc, #132]	; d0 <__cs3_start_c+0x8c>
  48:	e3580000 	cmp	r8, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2488001 	sub	r8, r8, #1
  54:	0a00001c 	beq	cc <__cs3_start_c+0x88>
  58:	e59f7074 	ldr	r7, [pc, #116]	; d4 <__cs3_start_c+0x90>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e2475010 	sub	r5, r7, #16
  68:	e8951020 	ldm	r5, {r5, r12}
  6c:	e5176008 	ldr	r6, [r7, #-8]
  70:	e155000c 	cmp	r5, r12
  74:	008cc006 	addeq	r12, r12, r6
  78:	0a000007 	beq	9c <__cs3_start_c+0x58>
  7c:	e3560000 	cmp	r6, #0
  80:	0a000005 	beq	9c <__cs3_start_c+0x58>
  84:	e1a0e005 	mov	lr, r5
  88:	e8be000c 	ldm	lr!, {r2, r3}
  8c:	e065400e 	rsb	r4, r5, lr
  90:	e1560004 	cmp	r6, r4
  94:	e8ac000c 	stmia	r12!, {r2, r3}
  98:	1afffffa 	bne	88 <__cs3_start_c+0x44>
  9c:	e517e004 	ldr	lr, [r7, #-4]
  a0:	e35e0000 	cmp	lr, #0
  a4:	11a0300c 	movne	r3, r12
  a8:	0a000003 	beq	bc <__cs3_start_c+0x78>
  ac:	e8a30003 	stmia	r3!, {r0, r1}
  b0:	e06c2003 	rsb	r2, r12, r3
  b4:	e15e0002 	cmp	lr, r2
  b8:	1afffffb 	bne	ac <__cs3_start_c+0x68>
  bc:	e2488001 	sub	r8, r8, #1
  c0:	e3780001 	cmn	r8, #1
  c4:	e2877014 	add	r7, r7, #20
  c8:	1affffe5 	bne	64 <__cs3_start_c+0x20>
  cc:	eb00020f 	bl	910 <__cs3_premain>
  d0:	00000001 	.word	0x00000001
  d4:	00000a74 	.word	0x00000a74

000000d8 <__cs3_start_asm_sim>:
  d8:	e28f103c 	add	r1, pc, #60	; 0x3c
  dc:	e3a00016 	mov	r0, #22
  e0:	ef123456 	svc	0x00123456
  e4:	e3500000 	cmp	r0, #0
  e8:	ba000008 	blt	110 <__cs3_start_asm_sim+0x38>
  ec:	e59f2028 	ldr	r2, [pc, #40]	; 11c <__cs3_heap_start_ptr>
  f0:	e59fd01c 	ldr	sp, [pc, #28]	; 114 <__cs3_start_asm_sim+0x3c>
  f4:	e5920008 	ldr	r0, [r2, #8]
  f8:	e3500000 	cmp	r0, #0
  fc:	11a0d000 	movne	sp, r0
 100:	e59f1010 	ldr	r1, [pc, #16]	; 118 <__cs3_start_asm_sim+0x40>
 104:	e5920004 	ldr	r0, [r2, #4]
 108:	e3500000 	cmp	r0, #0
 10c:	15810000 	strne	r0, [r1]
 110:	eaffffcb 	b	44 <__cs3_start_c>
 114:	3ffffffc 	.word	0x3ffffffc
 118:	00000eb0 	.word	0x00000eb0

0000011c <__cs3_heap_start_ptr>:
 11c:	00000ed8 	.word	0x00000ed8

00000120 <_start>:
 120:	e51fd000 	ldr	sp, [pc, #-0]	; 128 <_start+0x8>
 124:	eaffffc6 	b	44 <__cs3_start_c>
 128:	3ffffffc 	.word	0x3ffffffc

0000012c <deregister_tm_clones>:
 12c:	e92d4008 	push	{r3, lr}
 130:	e59f002c 	ldr	r0, [pc, #44]	; 164 <deregister_tm_clones+0x38>
 134:	e59f302c 	ldr	r3, [pc, #44]	; 168 <deregister_tm_clones+0x3c>
 138:	e0603003 	rsb	r3, r0, r3
 13c:	e3530006 	cmp	r3, #6
 140:	8a000001 	bhi	14c <deregister_tm_clones+0x20>
 144:	e8bd4008 	pop	{r3, lr}
 148:	e12fff1e 	bx	lr
 14c:	e59f3018 	ldr	r3, [pc, #24]	; 16c <deregister_tm_clones+0x40>
 150:	e3530000 	cmp	r3, #0
 154:	0afffffa 	beq	144 <deregister_tm_clones+0x18>
 158:	e1a0e00f 	mov	lr, pc
 15c:	e12fff13 	bx	r3
 160:	eafffff7 	b	144 <deregister_tm_clones+0x18>
 164:	00000eb8 	.word	0x00000eb8
 168:	00000ebb 	.word	0x00000ebb
 16c:	00000000 	.word	0x00000000

00000170 <register_tm_clones>:
 170:	e92d4008 	push	{r3, lr}
 174:	e59f0034 	ldr	r0, [pc, #52]	; 1b0 <register_tm_clones+0x40>
 178:	e59f3034 	ldr	r3, [pc, #52]	; 1b4 <register_tm_clones+0x44>
 17c:	e0603003 	rsb	r3, r0, r3
 180:	e1a03143 	asr	r3, r3, #2
 184:	e0833fa3 	add	r3, r3, r3, lsr #31
 188:	e1b010c3 	asrs	r1, r3, #1
 18c:	1a000001 	bne	198 <register_tm_clones+0x28>
 190:	e8bd4008 	pop	{r3, lr}
 194:	e12fff1e 	bx	lr
 198:	e59f2018 	ldr	r2, [pc, #24]	; 1b8 <register_tm_clones+0x48>
 19c:	e3520000 	cmp	r2, #0
 1a0:	0afffffa 	beq	190 <register_tm_clones+0x20>
 1a4:	e1a0e00f 	mov	lr, pc
 1a8:	e12fff12 	bx	r2
 1ac:	eafffff7 	b	190 <register_tm_clones+0x20>
 1b0:	00000eb8 	.word	0x00000eb8
 1b4:	00000eb8 	.word	0x00000eb8
 1b8:	00000000 	.word	0x00000000

000001bc <__do_global_dtors_aux>:
 1bc:	e92d4010 	push	{r4, lr}
 1c0:	e59f402c 	ldr	r4, [pc, #44]	; 1f4 <__do_global_dtors_aux+0x38>
 1c4:	e5d43000 	ldrb	r3, [r4]
 1c8:	e3530000 	cmp	r3, #0
 1cc:	1a000006 	bne	1ec <__do_global_dtors_aux+0x30>
 1d0:	ebffffd5 	bl	12c <deregister_tm_clones>
 1d4:	e59f301c 	ldr	r3, [pc, #28]	; 1f8 <__do_global_dtors_aux+0x3c>
 1d8:	e3530000 	cmp	r3, #0
 1dc:	159f0018 	ldrne	r0, [pc, #24]	; 1fc <__do_global_dtors_aux+0x40>
 1e0:	1320f000 	nopne	{0}
 1e4:	e3a03001 	mov	r3, #1
 1e8:	e5c43000 	strb	r3, [r4]
 1ec:	e8bd4010 	pop	{r4, lr}
 1f0:	e12fff1e 	bx	lr
 1f4:	00000eb8 	.word	0x00000eb8
 1f8:	00000000 	.word	0x00000000
 1fc:	00000a18 	.word	0x00000a18

00000200 <frame_dummy>:
 200:	e92d4008 	push	{r3, lr}
 204:	e59f3034 	ldr	r3, [pc, #52]	; 240 <frame_dummy+0x40>
 208:	e3530000 	cmp	r3, #0
 20c:	159f0030 	ldrne	r0, [pc, #48]	; 244 <frame_dummy+0x44>
 210:	159f1030 	ldrne	r1, [pc, #48]	; 248 <frame_dummy+0x48>
 214:	1320f000 	nopne	{0}
 218:	e59f002c 	ldr	r0, [pc, #44]	; 24c <frame_dummy+0x4c>
 21c:	e5903000 	ldr	r3, [r0]
 220:	e3530000 	cmp	r3, #0
 224:	0a000003 	beq	238 <frame_dummy+0x38>
 228:	e59f3020 	ldr	r3, [pc, #32]	; 250 <frame_dummy+0x50>
 22c:	e3530000 	cmp	r3, #0
 230:	11a0e00f 	movne	lr, pc
 234:	112fff13 	bxne	r3
 238:	e8bd4008 	pop	{r3, lr}
 23c:	eaffffcb 	b	170 <register_tm_clones>
 240:	00000000 	.word	0x00000000
 244:	00000a18 	.word	0x00000a18
 248:	00000ebc 	.word	0x00000ebc
 24c:	00000a78 	.word	0x00000a78
 250:	00000000 	.word	0x00000000

00000254 <findNextLetter>:
#define Mask_44b 0x0FFFFFFFFFFFFF
#define Mask_42b 0x03FFFFFFFFFFFF

int findNextLetter(int *prev)
{
	switch ((*prev)){
 254:	e5903000 	ldr	r3, [r0]
 258:	e353000c 	cmp	r3, #12
 25c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 260:	ea00001a 	b	2d0 <findNextLetter+0x7c>
 264:	00000298 	.word	0x00000298
 268:	000002d8 	.word	0x000002d8
 26c:	000002a0 	.word	0x000002a0
 270:	000002a0 	.word	0x000002a0
 274:	000002a8 	.word	0x000002a8
 278:	000002b0 	.word	0x000002b0
 27c:	000002b8 	.word	0x000002b8
 280:	000002b8 	.word	0x000002b8
 284:	000002a8 	.word	0x000002a8
 288:	000002c0 	.word	0x000002c0
 28c:	000002a0 	.word	0x000002a0
 290:	000002c8 	.word	0x000002c8
 294:	000002b0 	.word	0x000002b0
		case 0:
			return H;
 298:	e3a00076 	mov	r0, #118	; 0x76
 29c:	e12fff1e 	bx	lr
		case 1:
			return E;
		case 2:
		case 3:
		case 10:
			return L;
 2a0:	e3a00038 	mov	r0, #56	; 0x38
 2a4:	e12fff1e 	bx	lr
		
		case 4:
		case 8:
			return O;
 2a8:	e3a0003f 	mov	r0, #63	; 0x3f
 2ac:	e12fff1e 	bx	lr
		case 5:
		case 12:
			return 0;
 2b0:	e3a00000 	mov	r0, #0
 2b4:	e12fff1e 	bx	lr
		case 6:
		case 7:
			return U;
 2b8:	e3a0003e 	mov	r0, #62	; 0x3e
 2bc:	e12fff1e 	bx	lr
		case 9:
			return r;
 2c0:	e3a00050 	mov	r0, #80	; 0x50
 2c4:	e12fff1e 	bx	lr
		case 11:
			return d;
 2c8:	e3a0005e 	mov	r0, #94	; 0x5e
 2cc:	e12fff1e 	bx	lr
		

	}// case
	
	return 0;
 2d0:	e3a00000 	mov	r0, #0
 2d4:	e12fff1e 	bx	lr
{
	switch ((*prev)){
		case 0:
			return H;
		case 1:
			return E;
 2d8:	e3a00079 	mov	r0, #121	; 0x79

	}// case
	
	return 0;
	
}// findNextLetter
 2dc:	e12fff1e 	bx	lr

000002e0 <displayHello>:

void displayHello(
		long long int *curr_disp,
		int *curr_index //stores current position of hello world
){
 2e0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 2e4:	e1a06000 	mov	r6, r0
 2e8:	e1a07001 	mov	r7, r1
	(*curr_disp) = (((*curr_disp) << nextHex) + (findNextLetter(&(*curr_index)))) & Mask_44b;
 2ec:	e1a00001 	mov	r0, r1
 2f0:	ebffffd7 	bl	254 <findNextLetter>
 2f4:	e5961000 	ldr	r1, [r6]
 2f8:	e596c004 	ldr	r12, [r6, #4]
 2fc:	e1a0338c 	lsl	r3, r12, #7
 300:	e1833ca1 	orr	r3, r3, r1, lsr #25
 304:	e1a02381 	lsl	r2, r1, #7
 308:	e0924000 	adds	r4, r2, r0
 30c:	e0a35fc0 	adc	r5, r3, r0, asr #31
 310:	e1a00004 	mov	r0, r4
 314:	e1a01005 	mov	r1, r5
 318:	e3e04000 	mvn	r4, #0
 31c:	e30f5fff 	movw	r5, #65535	; 0xffff
 320:	e340500f 	movt	r5, #15
 324:	e0002004 	and	r2, r0, r4
 328:	e0013005 	and	r3, r1, r5
 32c:	e1c620f0 	strd	r2, [r6]

	if((*curr_index) == 12){ //if current character is last character "_" in "hello world_", reset back to "h"
 330:	e5973000 	ldr	r3, [r7]
 334:	e353000c 	cmp	r3, #12
		(*curr_index) = 0;
 338:	03a03000 	moveq	r3, #0
	}else{	//if not, advance to next character in "hello world"		 
		(*curr_index)++;
 33c:	12833001 	addne	r3, r3, #1
 340:	e5873000 	str	r3, [r7]
 344:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000348 <displayCustom>:


void displayCustom(
		long long int *curr_pattern,
		long long int wrapHex
){
 348:	e92d00f0 	push	{r4, r5, r6, r7}
   
  wrapHex = ((*curr_pattern) >> (nextHex * 5)) & 0x07F;
 34c:	e590c000 	ldr	r12, [r0]
 350:	e5901004 	ldr	r1, [r0, #4]
  (*curr_pattern) = (((*curr_pattern) << (nextHex)) + wrapHex) & Mask_42b;
 354:	e1a03381 	lsl	r3, r1, #7
 358:	e1833cac 	orr	r3, r3, r12, lsr #25
 35c:	e1a0238c 	lsl	r2, r12, #7
void displayCustom(
		long long int *curr_pattern,
		long long int wrapHex
){
   
  wrapHex = ((*curr_pattern) >> (nextHex * 5)) & 0x07F;
 360:	e1a041c1 	asr	r4, r1, #3
 364:	e1a05fc1 	asr	r5, r1, #31
 368:	e3a0607f 	mov	r6, #127	; 0x7f
 36c:	e3a07000 	mov	r7, #0
 370:	e0044006 	and	r4, r4, r6
 374:	e0055007 	and	r5, r5, r7
  (*curr_pattern) = (((*curr_pattern) << (nextHex)) + wrapHex) & Mask_42b;
 378:	e0922004 	adds	r2, r2, r4
 37c:	e0a33005 	adc	r3, r3, r5
 380:	e3e06000 	mvn	r6, #0
 384:	e30f7fff 	movw	r7, #65535	; 0xffff
 388:	e3407003 	movt	r7, #3
 38c:	e0022006 	and	r2, r2, r6
 390:	e0033007 	and	r3, r3, r7
 394:	e1c020f0 	strd	r2, [r0]
	
	return;
	
}// displayCustom
 398:	e8bd00f0 	pop	{r4, r5, r6, r7}
 39c:	e12fff1e 	bx	lr

000003a0 <main>:



int main(void)
{
 3a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 3a4:	e24dd024 	sub	sp, sp, #36	; 0x24

	int hex3_0_val = 0;
	int hex5_4_val = 0;
	
	//vars for hello world
	long long int hw_disp = 0;
 3a8:	e3a02000 	mov	r2, #0
 3ac:	e3a03000 	mov	r3, #0
 3b0:	e1cd21f8 	strd	r2, [sp, #24]
	int char_index = 0;
 3b4:	e3a06000 	mov	r6, #0
 3b8:	e58d6014 	str	r6, [sp, #20]
	

	//vars for custom
	long long int custom_pattern = 0;
 3bc:	e28d1020 	add	r1, sp, #32
 3c0:	e16121f8 	strd	r2, [r1, #-24]!	; 0xffffffe8
 3c4:	e58d1004 	str	r1, [sp, #4]
	
	int state = 0; // state 0 = nothing, state 1 = Hello World, state 2 = custom
	int timer = 25000;
  
  	int pause = 0;
	int keyPressed = 0;
 3c8:	e1a05006 	mov	r5, r6
	int custom_wrapHex = 0;
	
	int state = 0; // state 0 = nothing, state 1 = Hello World, state 2 = custom
	int timer = 25000;
  
  	int pause = 0;
 3cc:	e1a0b006 	mov	r11, r6
	//vars for custom
	long long int custom_pattern = 0;
	int custom_wrapHex = 0;
	
	int state = 0; // state 0 = nothing, state 1 = Hello World, state 2 = custom
	int timer = 25000;
 3d0:	e30671a8 	movw	r7, #25000	; 0x61a8

	//vars for custom
	long long int custom_pattern = 0;
	int custom_wrapHex = 0;
	
	int state = 0; // state 0 = nothing, state 1 = Hello World, state 2 = custom
 3d4:	e58d6000 	str	r6, [sp]
	int key_val = 0;
	int switch_val_led = 0;
	

	int hex3_0_val = 0;
	int hex5_4_val = 0;
 3d8:	e1a0a006 	mov	r10, r6

	int key_val = 0;
	int switch_val_led = 0;
	

	int hex3_0_val = 0;
 3dc:	e1a09006 	mov	r9, r6
        case 2:
          hex3_0_val = custom_pattern;
          hex5_4_val = custom_pattern >> (nextHex *4);
        
          displayCustom(&custom_pattern, custom_wrapHex);
          break;
 3e0:	e1a08006 	mov	r8, r6
          				if (state != 1){ //and not already displaying hello world, initialize these variables
            					hw_disp = 0;
            					char_index = 0;
            					state = 1;
          				}else{
            					custom_pattern = (*switchptr);
 3e4:	e1a04006 	mov	r4, r6
 3e8:	e34f4f20 	movt	r4, #65312	; 0xff20
 3ec:	ea000001 	b	3f8 <main+0x58>
		*(hexdisp5_4) = hex5_4_val;

		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
 3f0:	e1a02006 	mov	r2, r6
 3f4:	e1a06002 	mov	r6, r2
  	int j = 0;

	while(1)
	{
			
		if(keyPressed){
 3f8:	e3550000 	cmp	r5, #0
 3fc:	0a00003b 	beq	4f0 <main+0x150>
		switch(key_val){
 400:	e2463001 	sub	r3, r6, #1
 404:	e3530007 	cmp	r3, #7
 408:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 40c:	ea000035 	b	4e8 <main+0x148>
 410:	00000430 	.word	0x00000430
 414:	00000484 	.word	0x00000484
 418:	000004e8 	.word	0x000004e8
 41c:	00000490 	.word	0x00000490
 420:	000004e8 	.word	0x000004e8
 424:	000004e8 	.word	0x000004e8
 428:	000004e8 	.word	0x000004e8
 42c:	000004bc 	.word	0x000004bc
			case KEY0: //if key0 is pressed
       			 	if (pause == 0){
 430:	e35b0000 	cmp	r11, #0
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 434:	11a05008 	movne	r5, r8
	{
			
		if(keyPressed){
		switch(key_val){
			case KEY0: //if key0 is pressed
       			 	if (pause == 0){
 438:	1a000049 	bne	564 <main+0x1c4>
          				if (state != 1){ //and not already displaying hello world, initialize these variables
 43c:	e59d2000 	ldr	r2, [sp]
 440:	e3520001 	cmp	r2, #1
 444:	0a000007 	beq	468 <main+0xc8>
            					hw_disp = 0;
 448:	e3a02000 	mov	r2, #0
 44c:	e3a03000 	mov	r3, #0
 450:	e1cd21f8 	strd	r2, [sp, #24]
            					char_index = 0;
 454:	e58d8014 	str	r8, [sp, #20]
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 458:	e1a05008 	mov	r5, r8
			case KEY0: //if key0 is pressed
       			 	if (pause == 0){
          				if (state != 1){ //and not already displaying hello world, initialize these variables
            					hw_disp = 0;
            					char_index = 0;
            					state = 1;
 45c:	e3a03001 	mov	r3, #1
 460:	e58d3000 	str	r3, [sp]
 464:	ea000029 	b	510 <main+0x170>
          				}else{
            					custom_pattern = (*switchptr);
 468:	e5942030 	ldr	r2, [r4, #48]	; 0x30
 46c:	e1a03fc2 	asr	r3, r2, #31
 470:	e1cd20f8 	strd	r2, [sp, #8]
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 474:	e1a05008 	mov	r5, r8
            					char_index = 0;
            					state = 1;
          				}else{
            					custom_pattern = (*switchptr);
            					custom_wrapHex = 0;
            					state = 2;
 478:	e3a01002 	mov	r1, #2
 47c:	e58d1000 	str	r1, [sp]
 480:	ea00002c 	b	538 <main+0x198>
          				}
        			}// if not paused
				break;
			case KEY1:
       				if(pause){
 484:	e22bb001 	eor	r11, r11, #1
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 488:	e1a05008 	mov	r5, r8
 48c:	ea000017 	b	4f0 <main+0x150>
          			}else{
            				pause = 1;
          			}
				break;
			case KEY2:
				if ((pause == 0) && (timer <= 40000)){
 490:	e22b3001 	eor	r3, r11, #1
 494:	e3092c40 	movw	r2, #40000	; 0x9c40
 498:	e1570002 	cmp	r7, r2
 49c:	c3a03000 	movgt	r3, #0
 4a0:	d2033001 	andle	r3, r3, #1
 4a4:	e3530000 	cmp	r3, #0
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 4a8:	01a05008 	moveq	r5, r8
            				pause = 1;
          			}
				break;
			case KEY2:
				if ((pause == 0) && (timer <= 40000)){
					timer = timer + 5000;				
 4ac:	12877d4e 	addne	r7, r7, #4992	; 0x1380
 4b0:	12877008 	addne	r7, r7, #8
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 4b4:	11a05008 	movne	r5, r8
 4b8:	ea00000c 	b	4f0 <main+0x150>
				if ((pause == 0) && (timer <= 40000)){
					timer = timer + 5000;				
				}
				break;
			case KEY3:
				if ((pause == 0) && (timer >= 10000)){
 4bc:	e22b3001 	eor	r3, r11, #1
 4c0:	e302270f 	movw	r2, #9999	; 0x270f
 4c4:	e1570002 	cmp	r7, r2
 4c8:	d3a03000 	movle	r3, #0
 4cc:	c2033001 	andgt	r3, r3, #1
 4d0:	e3530000 	cmp	r3, #0
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 4d4:	01a05008 	moveq	r5, r8
					timer = timer + 5000;				
				}
				break;
			case KEY3:
				if ((pause == 0) && (timer >= 10000)){
					timer = timer - 5000;
 4d8:	12477d4e 	subne	r7, r7, #4992	; 0x1380
 4dc:	12477008 	subne	r7, r7, #8
				break;
			default:
				break;					

		}//switch
		keyPressed = 0;
 4e0:	11a05008 	movne	r5, r8
 4e4:	ea000001 	b	4f0 <main+0x150>
 4e8:	e1a05008 	mov	r5, r8
 4ec:	eaffffff 	b	4f0 <main+0x150>





    if (pause == 0){
 4f0:	e35b0000 	cmp	r11, #0
 4f4:	1a00001a 	bne	564 <main+0x1c4>
      switch(state){
 4f8:	e59d2000 	ldr	r2, [sp]
 4fc:	e3520001 	cmp	r2, #1
 500:	0a000002 	beq	510 <main+0x170>
 504:	e3520002 	cmp	r2, #2
 508:	0a00000a 	beq	538 <main+0x198>
 50c:	ea000014 	b	564 <main+0x1c4>
        case 1: //if in state 1, run function "displayHello"
          displayHello(&hw_disp, &char_index);
 510:	e28d0018 	add	r0, sp, #24
 514:	e28d1014 	add	r1, sp, #20
 518:	ebffff70 	bl	2e0 <displayHello>
          hex3_0_val = hw_disp;
 51c:	e59d3018 	ldr	r3, [sp, #24]
 520:	e1a09003 	mov	r9, r3
          hex5_4_val = hw_disp >> (nextHex * 4);				
 524:	e1a03e23 	lsr	r3, r3, #28
 528:	e59da01c 	ldr	r10, [sp, #28]
 52c:	e183a20a 	orr	r10, r3, r10, lsl #4
          break;
 530:	e1a0b008 	mov	r11, r8
 534:	ea00000a 	b	564 <main+0x1c4>
        case 2:
          hex3_0_val = custom_pattern;
 538:	e59d3008 	ldr	r3, [sp, #8]
 53c:	e1a09003 	mov	r9, r3
          hex5_4_val = custom_pattern >> (nextHex *4);
 540:	e1a03e23 	lsr	r3, r3, #28
 544:	e59da00c 	ldr	r10, [sp, #12]
 548:	e183a20a 	orr	r10, r3, r10, lsl #4
        
          displayCustom(&custom_pattern, custom_wrapHex);
 54c:	e59d0004 	ldr	r0, [sp, #4]
 550:	e3a02000 	mov	r2, #0
 554:	e3a03000 	mov	r3, #0
 558:	ebffff7a 	bl	348 <displayCustom>
          break;
 55c:	e1a0b008 	mov	r11, r8
 560:	eaffffff 	b	564 <main+0x1c4>
    }// if pause
    
    


		*(hexdisp3_0) = hex3_0_val;
 564:	e5849020 	str	r9, [r4, #32]
		*(hexdisp5_4) = hex5_4_val;
 568:	e584a010 	str	r10, [r4, #16]

		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
 56c:	e3570000 	cmp	r7, #0
 570:	daffff9e 	ble	3f0 <main+0x50>
 574:	e1a0c008 	mov	r12, r8
				switch_val_led = *(switchptr);
				*(led) = switch_val_led;
				
				key_val = *(keyptr);

				if((key_val != 0) && (prev_key == 0)){
 578:	e3a0e009 	mov	lr, #9
 57c:	ea00000e 	b	5bc <main+0x21c>
		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
      			for(j=0; j < 10; j++){
				switch_val_led = *(switchptr);
 580:	e5942030 	ldr	r2, [r4, #48]	; 0x30
				*(led) = switch_val_led;
 584:	e5842040 	str	r2, [r4, #64]	; 0x40
				
				key_val = *(keyptr);
 588:	e5942000 	ldr	r2, [r4]

				if((key_val != 0) && (prev_key == 0)){
 58c:	e3520000 	cmp	r2, #0
 590:	03a01000 	moveq	r1, #0
 594:	12001001 	andne	r1, r0, #1
 598:	e3510000 	cmp	r1, #0
 59c:	1a000011 	bne	5e8 <main+0x248>

		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
      			for(j=0; j < 10; j++){
 5a0:	e2533001 	subs	r3, r3, #1
 5a4:	1afffff5 	bne	580 <main+0x1e0>
				if((key_val != 0) && (prev_key == 0)){
					keyPressed = 1;
					break;
				}// then break out of for loop
      			}// for j
		if(keyPressed){
 5a8:	e3550000 	cmp	r5, #0
 5ac:	1affff90 	bne	3f4 <main+0x54>
		*(hexdisp5_4) = hex5_4_val;

		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
 5b0:	e28cc001 	add	r12, r12, #1
 5b4:	e15c0007 	cmp	r12, r7
 5b8:	0affff8d 	beq	3f4 <main+0x54>
      			for(j=0; j < 10; j++){
				switch_val_led = *(switchptr);
 5bc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
				*(led) = switch_val_led;
 5c0:	e5843040 	str	r3, [r4, #64]	; 0x40
				
				key_val = *(keyptr);
 5c4:	e5942000 	ldr	r2, [r4]

				if((key_val != 0) && (prev_key == 0)){
 5c8:	e2760001 	rsbs	r0, r6, #1
 5cc:	33a00000 	movcc	r0, #0
 5d0:	e3520000 	cmp	r2, #0
 5d4:	03a03000 	moveq	r3, #0
 5d8:	12003001 	andne	r3, r0, #1
 5dc:	e3530000 	cmp	r3, #0
 5e0:	01a0300e 	moveq	r3, lr
 5e4:	0affffe5 	beq	580 <main+0x1e0>
		*(hexdisp5_4) = hex5_4_val;

		prev_key = key_val;


    		for(i =0 ; i < timer; i++){
 5e8:	e3a05001 	mov	r5, #1
 5ec:	eaffff80 	b	3f4 <main+0x54>

000005f0 <atexit>:
 5f0:	e92d4008 	push	{r3, lr}
 5f4:	e1a01000 	mov	r1, r0
 5f8:	e3a00000 	mov	r0, #0
 5fc:	e1a03000 	mov	r3, r0
 600:	e1a02000 	mov	r2, r0
 604:	eb00000e 	bl	644 <__register_exitproc>
 608:	e8bd4008 	pop	{r3, lr}
 60c:	e12fff1e 	bx	lr

00000610 <exit>:
 610:	e92d4008 	push	{r3, lr}
 614:	e3a01000 	mov	r1, #0
 618:	e1a04000 	mov	r4, r0
 61c:	eb000044 	bl	734 <__call_exitprocs>
 620:	e59f3018 	ldr	r3, [pc, #24]	; 640 <exit+0x30>
 624:	e5930000 	ldr	r0, [r3]
 628:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 62c:	e3530000 	cmp	r3, #0
 630:	11a0e00f 	movne	lr, pc
 634:	112fff13 	bxne	r3
 638:	e1a00004 	mov	r0, r4
 63c:	eb0000c6 	bl	95c <_exit>
 640:	00000a1c 	.word	0x00000a1c

00000644 <__register_exitproc>:
 644:	e59fc0e0 	ldr	r12, [pc, #224]	; 72c <__register_exitproc+0xe8>
 648:	e92d4070 	push	{r4, r5, r6, lr}
 64c:	e59c5000 	ldr	r5, [r12]
 650:	e595c148 	ldr	r12, [r5, #328]	; 0x148
 654:	e35c0000 	cmp	r12, #0
 658:	0285cf53 	addeq	r12, r5, #332	; 0x14c
 65c:	e59c4004 	ldr	r4, [r12, #4]
 660:	0585c148 	streq	r12, [r5, #328]	; 0x148
 664:	e354001f 	cmp	r4, #31
 668:	e24dd010 	sub	sp, sp, #16
 66c:	e1a06000 	mov	r6, r0
 670:	da000016 	ble	6d0 <__register_exitproc+0x8c>
 674:	e59f00b4 	ldr	r0, [pc, #180]	; 730 <__register_exitproc+0xec>
 678:	e3500000 	cmp	r0, #0
 67c:	1a000003 	bne	690 <__register_exitproc+0x4c>
 680:	e3e00000 	mvn	r0, #0
 684:	e28dd010 	add	sp, sp, #16
 688:	e8bd4070 	pop	{r4, r5, r6, lr}
 68c:	e12fff1e 	bx	lr
 690:	e3a00e19 	mov	r0, #400	; 0x190
 694:	e58d100c 	str	r1, [sp, #12]
 698:	e58d2008 	str	r2, [sp, #8]
 69c:	e58d3004 	str	r3, [sp, #4]
 6a0:	e320f000 	nop	{0}
 6a4:	e250c000 	subs	r12, r0, #0
 6a8:	e59d100c 	ldr	r1, [sp, #12]
 6ac:	e59d2008 	ldr	r2, [sp, #8]
 6b0:	e59d3004 	ldr	r3, [sp, #4]
 6b4:	0afffff1 	beq	680 <__register_exitproc+0x3c>
 6b8:	e5950148 	ldr	r0, [r5, #328]	; 0x148
 6bc:	e3a04000 	mov	r4, #0
 6c0:	e88c0011 	stm	r12, {r0, r4}
 6c4:	e585c148 	str	r12, [r5, #328]	; 0x148
 6c8:	e58c4188 	str	r4, [r12, #392]	; 0x188
 6cc:	e58c418c 	str	r4, [r12, #396]	; 0x18c
 6d0:	e3560000 	cmp	r6, #0
 6d4:	1a000007 	bne	6f8 <__register_exitproc+0xb4>
 6d8:	e2843001 	add	r3, r4, #1
 6dc:	e3a00000 	mov	r0, #0
 6e0:	e2844002 	add	r4, r4, #2
 6e4:	e58c3004 	str	r3, [r12, #4]
 6e8:	e78c1104 	str	r1, [r12, r4, lsl #2]
 6ec:	e28dd010 	add	sp, sp, #16
 6f0:	e8bd4070 	pop	{r4, r5, r6, lr}
 6f4:	e12fff1e 	bx	lr
 6f8:	e3a05001 	mov	r5, #1
 6fc:	e1a05415 	lsl	r5, r5, r4
 700:	e08c0104 	add	r0, r12, r4, lsl #2
 704:	e5802088 	str	r2, [r0, #136]	; 0x88
 708:	e59c2188 	ldr	r2, [r12, #392]	; 0x188
 70c:	e1822005 	orr	r2, r2, r5
 710:	e58c2188 	str	r2, [r12, #392]	; 0x188
 714:	e5803108 	str	r3, [r0, #264]	; 0x108
 718:	e3560002 	cmp	r6, #2
 71c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 720:	01835005 	orreq	r5, r3, r5
 724:	058c518c 	streq	r5, [r12, #396]	; 0x18c
 728:	eaffffea 	b	6d8 <__register_exitproc+0x94>
 72c:	00000a1c 	.word	0x00000a1c
 730:	00000000 	.word	0x00000000

00000734 <__call_exitprocs>:
 734:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 738:	e59f315c 	ldr	r3, [pc, #348]	; 89c <__call_exitprocs+0x168>
 73c:	e5933000 	ldr	r3, [r3]
 740:	e24dd014 	sub	sp, sp, #20
 744:	e2832f52 	add	r2, r3, #328	; 0x148
 748:	e58d3004 	str	r3, [sp, #4]
 74c:	e58d0008 	str	r0, [sp, #8]
 750:	e58d200c 	str	r2, [sp, #12]
 754:	e1a07001 	mov	r7, r1
 758:	e3a09001 	mov	r9, #1
 75c:	e59d3004 	ldr	r3, [sp, #4]
 760:	e5938148 	ldr	r8, [r3, #328]	; 0x148
 764:	e3580000 	cmp	r8, #0
 768:	0a000038 	beq	850 <__call_exitprocs+0x11c>
 76c:	e59db00c 	ldr	r11, [sp, #12]
 770:	e5986004 	ldr	r6, [r8, #4]
 774:	e2564001 	subs	r4, r6, #1
 778:	50885106 	addpl	r5, r8, r6, lsl #2
 77c:	52866002 	addpl	r6, r6, #2
 780:	52855f42 	addpl	r5, r5, #264	; 0x108
 784:	50886106 	addpl	r6, r8, r6, lsl #2
 788:	5a000008 	bpl	7b0 <__call_exitprocs+0x7c>
 78c:	ea00002c 	b	844 <__call_exitprocs+0x110>
 790:	e5153004 	ldr	r3, [r5, #-4]
 794:	e1530007 	cmp	r3, r7
 798:	0a000006 	beq	7b8 <__call_exitprocs+0x84>
 79c:	e2444001 	sub	r4, r4, #1
 7a0:	e3740001 	cmn	r4, #1
 7a4:	e2455004 	sub	r5, r5, #4
 7a8:	e2466004 	sub	r6, r6, #4
 7ac:	0a000024 	beq	844 <__call_exitprocs+0x110>
 7b0:	e3570000 	cmp	r7, #0
 7b4:	1afffff5 	bne	790 <__call_exitprocs+0x5c>
 7b8:	e5983004 	ldr	r3, [r8, #4]
 7bc:	e2433001 	sub	r3, r3, #1
 7c0:	e1530004 	cmp	r3, r4
 7c4:	e5163004 	ldr	r3, [r6, #-4]
 7c8:	13a02000 	movne	r2, #0
 7cc:	05884004 	streq	r4, [r8, #4]
 7d0:	15062004 	strne	r2, [r6, #-4]
 7d4:	e3530000 	cmp	r3, #0
 7d8:	0affffef 	beq	79c <__call_exitprocs+0x68>
 7dc:	e1a02419 	lsl	r2, r9, r4
 7e0:	e5981188 	ldr	r1, [r8, #392]	; 0x188
 7e4:	e1120001 	tst	r2, r1
 7e8:	e598a004 	ldr	r10, [r8, #4]
 7ec:	0a00000d 	beq	828 <__call_exitprocs+0xf4>
 7f0:	e598118c 	ldr	r1, [r8, #396]	; 0x18c
 7f4:	e1120001 	tst	r2, r1
 7f8:	1a00000d 	bne	834 <__call_exitprocs+0x100>
 7fc:	e59d0008 	ldr	r0, [sp, #8]
 800:	e5151084 	ldr	r1, [r5, #-132]	; 0xffffff7c
 804:	e1a0e00f 	mov	lr, pc
 808:	e12fff13 	bx	r3
 80c:	e5983004 	ldr	r3, [r8, #4]
 810:	e153000a 	cmp	r3, r10
 814:	1affffd0 	bne	75c <__call_exitprocs+0x28>
 818:	e59b3000 	ldr	r3, [r11]
 81c:	e1530008 	cmp	r3, r8
 820:	0affffdd 	beq	79c <__call_exitprocs+0x68>
 824:	eaffffcc 	b	75c <__call_exitprocs+0x28>
 828:	e1a0e00f 	mov	lr, pc
 82c:	e12fff13 	bx	r3
 830:	eafffff5 	b	80c <__call_exitprocs+0xd8>
 834:	e5150084 	ldr	r0, [r5, #-132]	; 0xffffff7c
 838:	e1a0e00f 	mov	lr, pc
 83c:	e12fff13 	bx	r3
 840:	eafffff1 	b	80c <__call_exitprocs+0xd8>
 844:	e59f2054 	ldr	r2, [pc, #84]	; 8a0 <__call_exitprocs+0x16c>
 848:	e3520000 	cmp	r2, #0
 84c:	1a000002 	bne	85c <__call_exitprocs+0x128>
 850:	e28dd014 	add	sp, sp, #20
 854:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 858:	e12fff1e 	bx	lr
 85c:	e5983004 	ldr	r3, [r8, #4]
 860:	e3530000 	cmp	r3, #0
 864:	e5983000 	ldr	r3, [r8]
 868:	1a000008 	bne	890 <__call_exitprocs+0x15c>
 86c:	e3530000 	cmp	r3, #0
 870:	0a000006 	beq	890 <__call_exitprocs+0x15c>
 874:	e1a00008 	mov	r0, r8
 878:	e58b3000 	str	r3, [r11]
 87c:	e320f000 	nop	{0}
 880:	e59b8000 	ldr	r8, [r11]
 884:	e3580000 	cmp	r8, #0
 888:	1affffb8 	bne	770 <__call_exitprocs+0x3c>
 88c:	eaffffef 	b	850 <__call_exitprocs+0x11c>
 890:	e1a0b008 	mov	r11, r8
 894:	e1a08003 	mov	r8, r3
 898:	eafffff9 	b	884 <__call_exitprocs+0x150>
 89c:	00000a1c 	.word	0x00000a1c
 8a0:	00000000 	.word	0x00000000

000008a4 <register_fini>:
 8a4:	e92d4008 	push	{r3, lr}
 8a8:	e59f3010 	ldr	r3, [pc, #16]	; 8c0 <register_fini+0x1c>
 8ac:	e3530000 	cmp	r3, #0
 8b0:	159f000c 	ldrne	r0, [pc, #12]	; 8c4 <register_fini+0x20>
 8b4:	1bffff4d 	blne	5f0 <atexit>
 8b8:	e8bd4008 	pop	{r3, lr}
 8bc:	e12fff1e 	bx	lr
 8c0:	00000a44 	.word	0x00000a44
 8c4:	000008c8 	.word	0x000008c8

000008c8 <__libc_fini_array>:
 8c8:	e92d4038 	push	{r3, r4, r5, lr}
 8cc:	e59f5034 	ldr	r5, [pc, #52]	; 908 <__libc_fini_array+0x40>
 8d0:	e59f4034 	ldr	r4, [pc, #52]	; 90c <__libc_fini_array+0x44>
 8d4:	e0654004 	rsb	r4, r5, r4
 8d8:	e1b04144 	asrs	r4, r4, #2
 8dc:	10855104 	addne	r5, r5, r4, lsl #2
 8e0:	0a000005 	beq	8fc <__libc_fini_array+0x34>
 8e4:	e2444001 	sub	r4, r4, #1
 8e8:	e5353004 	ldr	r3, [r5, #-4]!
 8ec:	e1a0e00f 	mov	lr, pc
 8f0:	e12fff13 	bx	r3
 8f4:	e3540000 	cmp	r4, #0
 8f8:	1afffff9 	bne	8e4 <__libc_fini_array+0x1c>
 8fc:	eb000050 	bl	a44 <__libc_fini>
 900:	e8bd4038 	pop	{r3, r4, r5, lr}
 904:	e12fff1e 	bx	lr
 908:	00000a5c 	.word	0x00000a5c
 90c:	00000a60 	.word	0x00000a60

00000910 <__cs3_premain>:
 910:	e92d4008 	push	{r3, lr}
 914:	eb00001d 	bl	990 <__libc_init_array>
 918:	e59f3030 	ldr	r3, [pc, #48]	; 950 <__cs3_premain+0x40>
 91c:	e3530000 	cmp	r3, #0
 920:	15930000 	ldrne	r0, [r3]
 924:	01a00003 	moveq	r0, r3
 928:	e59f3024 	ldr	r3, [pc, #36]	; 954 <__cs3_premain+0x44>
 92c:	e3530000 	cmp	r3, #0
 930:	15931000 	ldrne	r1, [r3]
 934:	01a01003 	moveq	r1, r3
 938:	e3a02000 	mov	r2, #0
 93c:	ebfffe97 	bl	3a0 <main>
 940:	e59f3010 	ldr	r3, [pc, #16]	; 958 <__cs3_premain+0x48>
 944:	e3530000 	cmp	r3, #0
 948:	1bffff30 	blne	610 <exit>
 94c:	eafffffe 	b	94c <__cs3_premain+0x3c>
	...
 958:	00000610 	.word	0x00000610

0000095c <_exit>:
 95c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 960:	e3a00018 	mov	r0, #24
 964:	e59f1004 	ldr	r1, [pc, #4]	; 970 <_exit+0x14>
 968:	ef123456 	svc	0x00123456
 96c:	eafffffe 	b	96c <_exit+0x10>
 970:	00020026 	.word	0x00020026

00000974 <__cs3_isr_interrupt>:
 974:	eafffffe 	b	974 <__cs3_isr_interrupt>

00000978 <__cs3_isr_undef>:
 978:	eafffffe 	b	978 <__cs3_isr_undef>

0000097c <__cs3_isr_swi>:
 97c:	eafffffe 	b	97c <__cs3_isr_swi>

00000980 <__cs3_isr_pabort>:
 980:	eafffffe 	b	980 <__cs3_isr_pabort>

00000984 <__cs3_isr_dabort>:
 984:	eafffffe 	b	984 <__cs3_isr_dabort>

00000988 <__cs3_isr_irq>:
 988:	eafffffe 	b	988 <__cs3_isr_irq>

0000098c <__cs3_isr_fiq>:
 98c:	eafffffe 	b	98c <__cs3_isr_fiq>

00000990 <__libc_init_array>:
 990:	e92d4070 	push	{r4, r5, r6, lr}
 994:	e59f506c 	ldr	r5, [pc, #108]	; a08 <__libc_init_array+0x78>
 998:	e59f606c 	ldr	r6, [pc, #108]	; a0c <__libc_init_array+0x7c>
 99c:	e0656006 	rsb	r6, r5, r6
 9a0:	e1b06146 	asrs	r6, r6, #2
 9a4:	12455004 	subne	r5, r5, #4
 9a8:	13a04000 	movne	r4, #0
 9ac:	0a000005 	beq	9c8 <__libc_init_array+0x38>
 9b0:	e2844001 	add	r4, r4, #1
 9b4:	e5b53004 	ldr	r3, [r5, #4]!
 9b8:	e1a0e00f 	mov	lr, pc
 9bc:	e12fff13 	bx	r3
 9c0:	e1560004 	cmp	r6, r4
 9c4:	1afffff9 	bne	9b0 <__libc_init_array+0x20>
 9c8:	e59f5040 	ldr	r5, [pc, #64]	; a10 <__libc_init_array+0x80>
 9cc:	e59f6040 	ldr	r6, [pc, #64]	; a14 <__libc_init_array+0x84>
 9d0:	e0656006 	rsb	r6, r5, r6
 9d4:	eb000012 	bl	a24 <_init>
 9d8:	e1b06146 	asrs	r6, r6, #2
 9dc:	12455004 	subne	r5, r5, #4
 9e0:	13a04000 	movne	r4, #0
 9e4:	0a000005 	beq	a00 <__libc_init_array+0x70>
 9e8:	e2844001 	add	r4, r4, #1
 9ec:	e5b53004 	ldr	r3, [r5, #4]!
 9f0:	e1a0e00f 	mov	lr, pc
 9f4:	e12fff13 	bx	r3
 9f8:	e1560004 	cmp	r6, r4
 9fc:	1afffff9 	bne	9e8 <__libc_init_array+0x58>
 a00:	e8bd4070 	pop	{r4, r5, r6, lr}
 a04:	e12fff1e 	bx	lr
 a08:	00000a3c 	.word	0x00000a3c
 a0c:	00000a3c 	.word	0x00000a3c
 a10:	00000a3c 	.word	0x00000a3c
 a14:	00000a44 	.word	0x00000a44

Disassembly of section .rodata:

00000a1c <_global_impure_ptr>:
 a1c:	00000a88 00000043                       ....C...

00000a24 <_init>:
 a24:	e1a0c00d 	mov	r12, sp
 a28:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a2c:	e24cb004 	sub	r11, r12, #4
 a30:	e24bd028 	sub	sp, r11, #40	; 0x28
 a34:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a38:	e12fff1e 	bx	lr

00000a3c <__init_array_start>:
 a3c:	000008a4 	.word	0x000008a4

00000a40 <__frame_dummy_init_array_entry>:
 a40:	00000200                                ....

00000a44 <__libc_fini>:
 a44:	e1a0c00d 	mov	r12, sp
 a48:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a4c:	e24cb004 	sub	r11, r12, #4
 a50:	e24bd028 	sub	sp, r11, #40	; 0x28
 a54:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a58:	e12fff1e 	bx	lr

00000a5c <__fini_array_start>:
 a5c:	000001bc 	.word	0x000001bc

00000a60 <__cs3_regions>:
	...
 a6c:	00000eb8 	.word	0x00000eb8
 a70:	00000020 	.word	0x00000020

00000a74 <__cs3_regions_end>:
 a74:	00000000 	.word	0x00000000
